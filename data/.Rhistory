GLU <- -3.336
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20240207_GHenry_CSIA.csv") #modify with name of your data file
colnames(data.1)<-name
file.name <- "outliers_removed/20231013_outliersRem.csv" #file name for output file including relative file path
#### Correct to international standard of N air ####
#Calculations of offset values were done in R script "Correct_to_Nair.R"
#Three EA runs were looked at, the second was chosen as the most representative to base corrections off
#No linear relationship was found between offset and measured value so one average value
#will be applied to raw data
#The offset values were calculated as EA measured d15N - reference
offset <- mean(c(0.40160, 0.47160, 0.41725))
data.1$d15N.correct <- data.1$d15N - offset
View(data.1)
data.1STD <- subset(data.1, ID1=="5AA") #get only the standard data
AA <- unique(unlist(data.1STD$AAID)) #make a list of the AAs in the data
Intercept<-data.frame(Intercept=rep(NA,length(AA))) #initiate a dataframe for the intercepts of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Intercept[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[1,1]
}
Intercept #intercept values looped by aa
Slope<-data.frame(Slope=rep(NA,length(AA))) #initiate a dataframe for the slopes of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Slope[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[2,1]
}
Slope #slope values looped by aa
Coef<- data.frame(AA, Intercept, Slope) #creating a dataframe of the slope and intercepts values for each AA
actual <- ifelse(data.1$AAID=="NOR", NOR,
ifelse(data.1$AAID=="ALA", ALA,
ifelse(data.1$AAID=="VAL", VAL,
ifelse(data.1$AAID=="PHE", PHE,
ifelse(data.1$AAID=="GLU", GLU,0)))))
actual #check your data -- if there are 0s than you have an AA that is not included in the standard 12AA mix and the code will need
slope <- ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,3],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,3],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,3],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,3],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,3], 0)))))
intercept <-   ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,2],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,2],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,2],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,2],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,2], 0)))))
#####Applying Drift Correction####
difference <- actual-(data.1$Analysis*slope+intercept) #Applying both a drift and step correction in on estep from linear model data
adj <- data.1$d15N.correct + difference
data <- cbind(data.1, adj)
data
View(data)
#####Remove all 5AA samples from dataset####
data <- subset(data, !ID1 == "5AA")
sample.ID <- unique(data$ID1)
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
sample.ID <- unique(data$ID1)
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[1], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[2], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[3], "adj"]
values #look at values and determine if there are outliers
#remove the outlier row, only run this line of code when there is an outlier to remove
data <- data[!data$adj == values[3],]
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[3], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[4], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[1], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[2], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[3], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[4], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#remove the outlier row, only run this line of code when there is an outlier to remove
data <- data[!data$adj == values[2],]
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#generate .csv file of this data with no outliers
write.csv(data, file = file.name)
rm(list = ls())
setwd("~/Documents/GitHub/CSIA_lab_work/data")
library(dplyr)
name <- c("Analysis", "ID1", "RT", "AreaAll", "d29N", "d15N", "AAID")
#This is the stable isotpe ratios of the internal and external standards.
# MAKE SURE THIS IS UP TO DATE BASED ON HEEL STANDARDS!!! These values are as of 01/23/2020.
#If your samples were esterified after 01/23/2020 these values should be verfied with the standard file on the HEEL drive
ALA <- -1.21
VAL <- 0.361
NOR <- 14.163
PHE <- -5.004
GLU <- -3.336
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20240207_GHenry_CSIA.csv") #modify with name of your data file
colnames(data.1)<-name
file.name <- "outliers_removed/20240207_outliersRem.csv" #file name for output file including relative file path
#### Correct to international standard of N air ####
#Calculations of offset values were done in R script "Correct_to_Nair.R"
#Three EA runs were looked at, the second was chosen as the most representative to base corrections off
#No linear relationship was found between offset and measured value so one average value
#will be applied to raw data
#The offset values were calculated as EA measured d15N - reference
offset <- mean(c(0.40160, 0.47160, 0.41725))
data.1$d15N.correct <- data.1$d15N - offset
data.1STD <- subset(data.1, ID1=="5AA") #get only the standard data
AA <- unique(unlist(data.1STD$AAID)) #make a list of the AAs in the data
Intercept<-data.frame(Intercept=rep(NA,length(AA))) #initiate a dataframe for the intercepts of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Intercept[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[1,1]
}
Intercept #intercept values looped by aa
Slope<-data.frame(Slope=rep(NA,length(AA))) #initiate a dataframe for the slopes of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Slope[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[2,1]
}
Slope #slope values looped by aa
Coef<- data.frame(AA, Intercept, Slope) #creating a dataframe of the slope and intercepts values for each AA
actual <- ifelse(data.1$AAID=="NOR", NOR,
ifelse(data.1$AAID=="ALA", ALA,
ifelse(data.1$AAID=="VAL", VAL,
ifelse(data.1$AAID=="PHE", PHE,
ifelse(data.1$AAID=="GLU", GLU,0)))))
actual #check your data -- if there are 0s than you have an AA that is not included in the standard 12AA mix and the code will need
slope <- ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,3],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,3],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,3],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,3],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,3], 0)))))
intercept <-   ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,2],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,2],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,2],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,2],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,2], 0)))))
#####Applying Drift Correction####
difference <- actual-(data.1$Analysis*slope+intercept) #Applying both a drift and step correction in on estep from linear model data
adj <- data.1$d15N.correct + difference
data <- cbind(data.1, adj)
data
View(data)
#####Remove all 5AA samples from dataset####
data <- subset(data, !ID1 == "5AA")
sample.ID <- unique(data$ID1)
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#generate .csv file of this data with no outliers
write.csv(data, file = file.name)
rm(list = ls())
setwd("~/Documents/GitHub/CSIA_lab_work/data")
library(dplyr)
name <- c("Analysis", "ID1", "RT", "AreaAll", "d29N", "d15N", "AAID")
#This is the stable isotpe ratios of the internal and external standards.
# MAKE SURE THIS IS UP TO DATE BASED ON HEEL STANDARDS!!! These values are as of 01/23/2020.
#If your samples were esterified after 01/23/2020 these values should be verfied with the standard file on the HEEL drive
ALA <- -1.21
VAL <- 0.361
NOR <- 14.163
PHE <- -5.004
GLU <- -3.336
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20231013_GHenry_CSIA.csv") #modify with name of your data file
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20231013_GHenry_CSIA.csv") #modify with name of your data file
View(data.1)
colnames(data.1)<-name
file.name <- "outliers_removed/20240207_outliersRem.csv" #file name for output file including relative file path
#### Correct to international standard of N air ####
#Calculations of offset values were done in R script "Correct_to_Nair.R"
#Three EA runs were looked at, the second was chosen as the most representative to base corrections off
#No linear relationship was found between offset and measured value so one average value
#will be applied to raw data
#The offset values were calculated as EA measured d15N - reference
offset <- mean(c(0.40160, 0.47160, 0.41725))
data.1$d15N.correct <- data.1$d15N - offset
data.1STD <- subset(data.1, ID1=="5AA") #get only the standard data
AA <- unique(unlist(data.1STD$AAID)) #make a list of the AAs in the data
Intercept<-data.frame(Intercept=rep(NA,length(AA))) #initiate a dataframe for the intercepts of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Intercept[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[1,1]
}
Intercept #intercept values looped by aa
name <- c("Analysis", "ID1", "RT", "AreaAll", "d29N", "d15N", "AAID")
#This is the stable isotpe ratios of the internal and external standards.
# MAKE SURE THIS IS UP TO DATE BASED ON HEEL STANDARDS!!! These values are as of 01/23/2020.
#If your samples were esterified after 01/23/2020 these values should be verfied with the standard file on the HEEL drive
ALA <- -1.21
VAL <- 0.361
NOR <- 14.163
PHE <- -5.004
GLU <- -3.336
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20231013_GHenry_CSIA.csv") #modify with name of your data file
colnames(data.1)<-name
file.name <- "outliers_removed/20240207_outliersRem.csv" #file name for output file including relative file path
#### Correct to international standard of N air ####
#Calculations of offset values were done in R script "Correct_to_Nair.R"
#Three EA runs were looked at, the second was chosen as the most representative to base corrections off
#No linear relationship was found between offset and measured value so one average value
#will be applied to raw data
#The offset values were calculated as EA measured d15N - reference
offset <- mean(c(0.40160, 0.47160, 0.41725))
data.1$d15N.correct <- data.1$d15N - offset
View(data.1)
data.1STD <- subset(data.1, ID1=="5AA") #get only the standard data
AA <- unique(unlist(data.1STD$AAID)) #make a list of the AAs in the data
AA
name <- c("Analysis", "ID1", "RT", "AreaAll", "d29N", "d15N", "AAID")
#This is the stable isotpe ratios of the internal and external standards.
# MAKE SURE THIS IS UP TO DATE BASED ON HEEL STANDARDS!!! These values are as of 01/23/2020.
#If your samples were esterified after 01/23/2020 these values should be verfied with the standard file on the HEEL drive
ALA <- -1.21
VAL <- 0.361
NOR <- 14.163
PHE <- -5.004
GLU <- -3.336
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20231013_GHenry_CSIA.csv") #modify with name of your data file
colnames(data.1)<-name
file.name <- "outliers_removed/20240207_outliersRem.csv" #file name for output file including relative file path
#### Correct to international standard of N air ####
#Calculations of offset values were done in R script "Correct_to_Nair.R"
#Three EA runs were looked at, the second was chosen as the most representative to base corrections off
#No linear relationship was found between offset and measured value so one average value
#will be applied to raw data
#The offset values were calculated as EA measured d15N - reference
offset <- mean(c(0.40160, 0.47160, 0.41725))
data.1$d15N.correct <- data.1$d15N - offset
data.1STD <- subset(data.1, ID1=="5AA") #get only the standard data
AA <- unique(unlist(data.1STD$AAID)) #make a list of the AAs in the data
Intercept<-data.frame(Intercept=rep(NA,length(AA))) #initiate a dataframe for the intercepts of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Intercept[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[1,1]
}
Intercept #intercept values looped by aa
Slope<-data.frame(Slope=rep(NA,length(AA))) #initiate a dataframe for the slopes of the linear model
for(i in 1:length(AA)){
data <- subset(data.1STD, AAID==AA[i])
Slope[i,1]<- coef(summary(lm(as.numeric(d15N.correct)~as.numeric(Analysis), data=data)))[2,1]
}
Slope #slope values looped by aa
Coef<- data.frame(AA, Intercept, Slope) #creating a dataframe of the slope and intercepts values for each AA
actual <- ifelse(data.1$AAID=="NOR", NOR,
ifelse(data.1$AAID=="ALA", ALA,
ifelse(data.1$AAID=="VAL", VAL,
ifelse(data.1$AAID=="PHE", PHE,
ifelse(data.1$AAID=="GLU", GLU,0)))))
actual #check your data -- if there are 0s than you have an AA that is not included in the standard 12AA mix and the code will need
slope <- ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,3],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,3],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,3],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,3],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,3], 0)))))
intercept <-   ifelse(data.1$AAID=="NOR", filter(Coef, AA=="NOR")[1,2],
ifelse(data.1$AAID=="ALA", filter(Coef, AA=="ALA")[1,2],
ifelse(data.1$AAID=="VAL", filter(Coef, AA=="VAL")[1,2],
ifelse(data.1$AAID=="GLU", filter(Coef, AA=="GLU")[1,2],
ifelse(data.1$AAID=="PHE", filter(Coef, AA=="PHE")[1,2], 0)))))
#####Applying Drift Correction####
difference <- actual-(data.1$Analysis*slope+intercept) #Applying both a drift and step correction in on estep from linear model data
adj <- data.1$d15N.correct + difference
data <- cbind(data.1, adj)
data
View(data)
#####Remove all 5AA samples from dataset####
data <- subset(data, !ID1 == "5AA")
sample.ID <- unique(data$ID1)
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
sample.ID <- unique(data$ID1)
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[1], "adj"]
values #look at values and determine if there are outliers
sample.ID
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[2], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[3], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[4], "adj"]
values #look at values and determine if there are outliers
values <- data[data$AAID == "PHE" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[1], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[2], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[3], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[4], "adj"]
values #look at values and determine if there are outliers
#do the sample process with GLU
values <- data[data$AAID == "GLU" & data$ID1 == sample.ID[5], "adj"]
values #look at values and determine if there are outliers
#generate .csv file of this data with no outliers
write.csv(data, file = file.name)
#Reading in the .csv of the NACHO data file and setting the file name for your output file
data.1 <- SL.1 <- read.csv("cleaned/20231013_GHenry_CSIA.csv") #modify with name of your data file
colnames(data.1)<-name
file.name <- "outliers_removed/20231013_outliersRem.csv" #file name for output file including relative file path
#generate .csv file of this data with no outliers
write.csv(data, file = file.name)
rm(list = ls())
setwd("~/Documents/GitHub/CSIA_lab_work/data")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
