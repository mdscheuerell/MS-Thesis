process.di
process.di.fit
#density dependent
process.dd.nll <- function(pars, nt, K){
r <- pars[1]
N0 <- pars[2]
K <- pars[3]
nt.hat <- rep(NA, length(nt))
nt.hat[1] <- N0 + r * N0 * (1 - (N0/K))
for(i in 2:length(nt)){
nt.hat[i] <- nt[i-1] + r * nt[i-1] * (1 - (nt[i-1]/K))
}
nll <- -sum(dpois(x = nt, lambda = nt.hat, log = TRUE))
return(nll)
}
start.pars.dd <- c(0.25, 4, 3000)
start.pars.dd <- c(0.25, 3000, 3000)
process.dd.fit <- optim(par = start.pars.dd,
fn = process.dd.nll,
nt = nt,
K = K,
method = "BFGS") #density independent, process based model
process.dd <- process.dd.fit$value
process.dd
#calculate AIC for density independent
AIC.di.process <- 2 * (process.di + 2)
#calculate AIC for density dependent
AIC.dd.process <- 2 * (process.dd + 3)
#DAIC calculations
AIC.di - AIC.dd
#calculate AIC for density dependent
AIC.dd.process <- 2 * (process.dd + 3)
#DAIC calculations
AIC.di.process - AIC.dd.process
#DAIC calculations
AIC.dd.process - AIC.di.process
#### Observation Error Model ####
nt.obs <- wa_wolf$Abundance
#### Observation Error Model ####
nt.obs <- harborseals$abundance
#density dependent
obs.dd.nll <- function(pars, nt.obs) {
r <- pars[1]
N1 <- pars[2]
K <- pars[3]
nt <- rep(NA, length(nt.obs))
nt[1] <- N1
for(i in 2:length(nt)){
nt[i] <- nt[i - 1] + r * nt[i - 1] * (1 - (nt[i - 1]/K))
}
nll <- -sum(dpois(x = nt.obs, lambda = nt, log = TRUE))
return(nll)
}
start.pars.dd <- c(0.25, 4000, 4000)
obs.dd.fit <- optim(par = start.pars.dd,
fn = obs.dd.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.dd <- obs.dd.fit$value
obs.dd
#density independent
obs.di.nll <- function(pars, nt.obs) {
r <- pars[1]
N1 <- pars[2]
nt <- rep(NA, length(nt.obs))
nt[1] <- N1
for(i in 2:length(nt)){
nt[i] <- nt[i - 1] + r * nt[i - 1]
}
nll <- -sum(dpois(x = nt.obs, lambda = nt, log = TRUE))
return(nll)
}
start.pars.di <- c(0.25, 4000, 4000)
start.pars.di <- c(0.25, 4000)
start.pars.di <- c(0.25, 4000)
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di <- obs.di.fit$value
obs.di
#calculate AIC for density independent
AIC.di.obs <- 2 * (obs.di + 2)
#calculate AIC for density dependent
AIC.dd.obs <- 2 * (obs.dd + 3)
#DAIC calculations
AIC.dd.obs - AIC.di.obs
#DAIC calculations
AIC.di.obs - AIC.dd.obs
obs.dd.nll(start.pars.di, nt.obs)
obs.dd.nll(start.pars.di, nt.obs)
obs.di.nll(start.pars.di, nt.obs)
start.pars.di <- c(1, 4000)
obs.di.nll(start.pars.di, nt.obs)
obs.di.nll(start.pars.di, nt.obs)
start.pars.di <- c(1, 4000)
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di <- obs.di.fit$value
obs.di
#calculate AIC for density independent
AIC.di.obs <- 2 * (obs.di + 2)
#calculate AIC for density dependent
AIC.dd.obs <- 2 * (obs.dd + 3)
#DAIC calculations
AIC.di.obs - AIC.dd.obs
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di
start.pars.di <- c(0.25, 4000)
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di <- obs.di.fit$value
obs.di
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di.fit <- optim(par = start.pars.di,
fn = obs.di.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.di <- obs.di.fit$value
#calculate AIC for density independent
AIC.di.obs <- 2 * (obs.di + 2)
#calculate AIC for density dependent
AIC.dd.obs <- 2 * (obs.dd + 3)
#DAIC calculations
AIC.di.obs - AIC.dd.obs
#density dependent
obs.dd.nll <- function(pars, nt.obs) {
r <- pars[1]
N1 <- pars[2]
K <- pars[3]
nt <- rep(NA, length(nt.obs))
nt[1] <- N1
for(i in 2:length(nt)){
nt[i] <- nt[i - 1] + r * nt[i - 1] * (1 - (nt[i - 1]/K))
}
nll <- -sum(dpois(x = nt.obs, lambda = nt, log = TRUE))
return(nll)
}
start.pars.dd <- c(0.25, 4000, 8000)
obs.dd.fit <- optim(par = start.pars.dd,
fn = obs.dd.nll,
nt.obs = nt.obs,
method = "BFGS") #density independent, observation based model
obs.dd <- obs.dd.fit$value
obs.dd
#calculate AIC for density independent
AIC.di.obs <- 2 * (obs.di + 2)
#calculate AIC for density dependent
AIC.dd.obs <- 2 * (obs.dd + 3)
#DAIC calculations
AIC.di.obs - AIC.dd.obs
process.dd.fit
process.dd.fit$par[1]
nt.hat <- rep(NA, length(nt))
#show the fits
r <- process.dd.fit$par[1]
N0 <- process.dd.fit$par[2]
K <- process.dd.fit$par[3]
nt.hat <- rep(NA, length(nt))
nt.hat
nt.hat[1] <- N0 + r * N0 * (1 - (N0/K))
nt.hat
for(i in 2:length(nt)){
nt.hat[i] <- nt[i-1] + r * nt[i-1] * (1 - (nt[i-1]/K))
}
nt.hat.dd <- rep(NA, length(nt))
nt.hat.dd[1] <- N0 + r * N0 * (1 - (N0/K))
for(i in 2:length(nt)){
nt.hat.dd[i] <- nt[i-1] + r * nt[i-1] * (1 - (nt[i-1]/K))
}
plot(x = nt.hat.dd,
y = nt)
plot(x = nt.hat.dd,
y = nt)
abline(lm(nt ~ nt.hat.dd), col = "red")
plot(x = harborseals$year,
y = nt.obs)
obs.di.fit
#showing data as plots
r <- obs.di.fit$par[1]
N1 <- obs.di.fit$par[2]
nt <- rep(NA, length(nt.obs))
nt[1] <- N1
for(i in 2:length(nt)){
nt[i] <- nt[i - 1] + r * nt[i - 1]
}
nt
plot(x = harborseals$year,
y = nt.obs)
lines(nt)
?lines
plot(x = harborseals$year,
y = nt.obs)
lines(x = harborseals$year,
y = nt, col = "red")
#showing data as plots
r.di <- obs.di.fit$par[1]
N1.di <- obs.di.fit$par[2]
nt.di <- rep(NA, length(nt.obs))
nt.di[1] <- N1.di
for(i in 2:length(nt)){
nt.di[i] <- nt.di[i - 1] + r.di * nt.di[i - 1]
}
proc.di.plot <- plot(x = harborseals$year,
y = nt.obs)
lines(x = harborseals$year,
y = nt.di, col = "red")
obs.dd.fit
obs.dd.fit$par[1]
r.dd <- obs.dd.fit$par[1]
N1.dd <- obs.dd.fit$par[2]
K.dd <- obs.dd.fit$par[3]
nt.dd <- rep(NA, length(nt.obs))
nt.dd[1] <- N1
for(i in 2:length(nt.dd)){
nt.dd[i] <- nt.dd[i - 1] + r.dd * nt.dd[i - 1] * (1 - (nt.dd[i - 1]/K.dd))
}
process.plot <- plot(x = harborseals$year,
y = nt.obs)
lines(x = harborseals$year,
y = nt.di, col = "red")
lines(x = harborseals$year,
y = nt.dd, col = "blue")
legend("topright",
legend = c("Density Independent", "Density Dependent"),
col = c("red", "blue"),
lty = 1,
cex = 1.2)
legend("topleft",
legend = c("Density Independent", "Density Dependent"),
col = c("red", "blue"),
lty = 1,
cex = 1.2)
process.plot <- plot(x = harborseals$year,
y = nt.obs)
lines(x = harborseals$year,
y = nt.di, col = "red")
lines(x = harborseals$year,
y = nt.dd, col = "blue")
legend("topleft",
legend = c("Density Independent", "Density Dependent"),
col = c("red", "blue"),
lty = 1,
cex = 1.2)
process.plot <- plot(x = harborseals$year,
y = nt.obs,
xlab = "Year", ylab = "Population")
lines(x = harborseals$year,
y = nt.di, col = "red")
lines(x = harborseals$year,
y = nt.dd, col = "blue")
legend("topleft",
legend = c("Density Independent", "Density Dependent"),
col = c("red", "blue"),
lty = 1,
cex = 1.2)
observation.plot <- plot(x = harborseals$year,
y = nt.obs,
xlab = "Year", ylab = "Population")
lines(x = harborseals$year,
y = nt.di, col = "red")
lines(x = harborseals$year,
y = nt.dd, col = "blue")
legend("topleft",
legend = c("Density Independent", "Density Dependent"),
col = c("red", "blue"),
lty = 1,
cex = 1.2)
setwd("~/Downloads")
setwd("~/Documents/GitHub/CSIA_lab_work/data/final")
data <- read.csv(file = "data.csv")
#load packages
library(changepoint)
#visualize
library(ggplot2)
ggplot(data, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
# Getting the data in a format that will work to create a time series object
# Convert the "Year" column to a factor to ensure correct ordering
data$Year <- factor(data$Year, levels = rev(unique(data$Year)))
# Change the years that were missing so that the data frame years are consistent
data[c(61,62), 2] = "1992"
data[c(79,80), 2] = "1983"
data[c(113,114), 2] = "1968"
# Make new data frames for each system
Wood.all <- data[data$System == "Wood",]
Kvi.all <- data[data$System == "Kvichak",]
Eg.all <- data[data$System == "Egegik",]
# Plotting
plot(x = as.numeric(Wood.all[Wood.all$Age == "2", "Year"]),
y = Wood.all[Wood.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Kvi.all[Kvi.all$Age == "2", "Year"]),
y = Kvi.all[Kvi.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Eg.all[Eg.all$Age == "2", "Year"]),
y = Eg.all[Eg.all$Age == "2", "PHE.mean"],
type = "l")
# Average PHE across all ages and systems (should have one data point per year)
library(dplyr)
avg_data_all <- data %>%
group_by(Year) %>%
summarise(avg_PHE = mean(PHE.mean, na.rm = TRUE))
print(avg_data_all)
plot(avg_data_all)
# Convert data to a time series object
ts_data <- ts(avg_data_all$avg_PHE,
start = avg_data_all$Year[1],
end = avg_data_all$Year[length(avg_data_all$Year)],
frequency = 1)
plot(ts_data)
# Scale the data so the variance is 1 and mean is 0 and do CP analysis
ts_1_scale <- cpt.mean(as.vector(scale(ts_data)), method = "PELT")
# Plot the change point analysis results
plot(ts_1_scale, cpt.col = "blue")
summary(ts_1_scale)
# Average PHE across all systems with only age 2
age.2 <- data[data$Age == "2",]
library(dplyr)
avg_data_2 <- age.2 %>%
group_by(Year) %>%
summarise(PHE.mean = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
# Scale the data so the variance is 1 and mean is 0 and then do CP analysis
ts_2_scale <- cpt.mean(as.vector(scale(ts_data_2)))
# Plot the change point analysis results
plot(ts_2_scale, cpt.col = "blue")
summary(ts_2_scale)
# Average PHE for Wood with both age classes
library(dplyr)
Wood <- Wood.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_Wood <- ts(Wood$PHE,
start = Wood$Year[1],
end = Wood$Year[length(Wood$Year)],
frequency = 1)
plot(ts_Wood)
# Perform change point analysis using the 'cpt.mean' function
cpt.Wood <- cpt.mean(as.vector(scale(ts_Wood)))
# Plot the change point analysis results
plot(cpt.Wood, cpt.col = "blue")
summary(cpt.Wood)
# Average PHE for Kvi with both age classes
Kvichak <- Kvi.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_Kvichak <- ts(Kvichak$PHE,
start = Kvichak$Year[1],
end = Kvichak$Year[length(Kvichak$Year)],
frequency = 1)
plot(ts_Kvichak)
# Perform change point analysis using the 'cpt.mean' function
cpt.Egegik <- cpt.mean(as.vector(scale(ts_Egegik)))
# Plot the change point analysis results
plot(cpt.Kvichak, cpt.col = "blue")
summary(cpt.Egegik)
# Average PHE for Egegik with both age classes
Egegik <- Eg.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_Egegik <- ts(Egegik$PHE,
start = Egegik$Year[1],
end = Egegik$Year[length(Egegik$Year)],
frequency = 1)
plot(ts_Egegik)
# Perform change point analysis using the 'cpt.mean' function
cpt.Egegik <- cpt.mean(as.vector(scale(ts_Egegik)))
# Plot the change point analysis results
plot(cpt.Egegik, cpt.col = "blue")
# Plotting
plot(x = as.numeric(Wood.all[Wood.all$Age == "2", "Year"]),
y = Wood.all[Wood.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Kvi.all[Kvi.all$Age == "2", "Year"]),
y = Kvi.all[Kvi.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Eg.all[Eg.all$Age == "2", "Year"]),
y = Eg.all[Eg.all$Age == "2", "PHE.mean"],
type = "l")
# Average PHE across all ages and systems (should have one data point per year)
library(dplyr)
avg_data_all <- data %>%
group_by(Year) %>%
summarise(avg_PHE = mean(PHE.mean, na.rm = TRUE))
print(avg_data_all)
plot(avg_data_all)
# Convert data to a time series object
ts_data <- ts(avg_data_all$avg_PHE,
start = avg_data_all$Year[1],
end = avg_data_all$Year[length(avg_data_all$Year)],
frequency = 1)
plot(ts_data)
# Scale the data so the variance is 1 and mean is 0 and do CP analysis
ts_1_scale <- cpt.mean(as.vector(scale(ts_data)), method = "PELT")
# Plot the change point analysis results
plot(ts_1_scale, cpt.col = "blue")
#PDO average per year
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
for(i in 1:length(PDO$Year)){
PDO_annual[i,1] <- PDO$Year[i]
PDO_annual[i,2] <- mean(as.numeric(PDO[i, 2:13]))
}
plot(PDO_annual,
type = "l")
PDO <- read.csv(file = "Environmental/PDO.csv")
NPGO <- read.csv(file = "Environmental/NPGO.csv")
#PDO average per year
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
setwd("~/Documents/GitHub/CSIA_lab_work/data")
#Load Packages
library(dplyr)
library(ggplot2)
#Load Data
data <- read.csv(file = "final/data.csv")
PDO <- read.csv(file = "Environmental/PDO.csv")
NPGO <- read.csv(file = "Environmental/NPGO.csv")
#PDO average per year
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
for(i in 1:length(PDO$Year)){
PDO_annual[i,1] <- PDO$Year[i]
PDO_annual[i,2] <- mean(as.numeric(PDO[i, 2:13]))
}
plot(PDO_annual,
type = "l")
ts.PDO <- ts(PDO_annual[,2],
start = PDO_annual[1,1],
end = PDO_annual[169,1],
frequency = 1)
plot(x = ts.PDO)
cpt <- cpt.mean(as.vector(scale(ts.PDO)), method = "PELT")
plot(cpt, cpt.col = "blue")
summary(cpt)
avg_data_all <- data %>%
group_by(Year) %>%
summarise(avg_PHE = mean(PHE.mean, na.rm = TRUE))
print(avg_data_all)
plot(avg_data_all)
# Average PHE across all systems with only age 2
age.2 <- data[data$Age == "2",]
library(dplyr)
avg_data_2 <- age.2 %>%
group_by(Year) %>%
summarise(PHE.mean = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
# Average PHE across all systems with only age 2
age.2 <- data[data$Age == "2",]
library(dplyr)
avg_data_2 <- age.2 %>%
group_by(Year) %>%
summarise(PHE.mean = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
# Scale the data so the variance is 1 and mean is 0 and then do CP analysis
ts_2_scale <- cpt.mean(as.vector(scale(ts_data_2)))
# Plot the change point analysis results
plot(ts_2_scale, cpt.col = "blue")
summary(ts_2_scale)
plot(ts_data_2)
plot(age.2)
View(age.2)
plot(x = age.2$Year,
y = age.2$PHE.mean)
plot(x = age.2$Year,
y = age.2$PHE.mean,
type = "l")
View(avg_data_2)
plot(avg_data_2)
plot(avg_data_2, type = "l")
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
# Scale the data so the variance is 1 and mean is 0 and then do CP analysis
ts_2_scale <- cpt.mean(as.vector(scale(ts_data_2)))
# Plot the change point analysis results
plot(ts_2_scale, cpt.col = "blue")
length(avg_data_2$Year)
avg_data_2$Year[length(avg_data_2$Year)]
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h')
## inspect the `airquality` data set
head(airquality)
