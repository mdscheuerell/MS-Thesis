lty = 1,
cex = 1.2)
setwd("~/Documents/GitHub/CSIA_lab_work/data/final")
data <- read.csv(file = "data.csv")
#load packages
library(changepoint)
#visualize
library(ggplot2)
ggplot(data, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
# Getting the data in a format that will work to create a time series object
# Convert the "Year" column to a factor to ensure correct ordering
data$Year <- factor(data$Year, levels = rev(unique(data$Year)))
View(data)
# Pivot the data to wide format to create separate columns for each river and age combination
library(tidyr)
data_wide <- pivot_wider(data, names_from = System, values_from = PHE.mean)
View(data)
setwd("~/Documents/GitHub/CSIA_lab_work/data/final")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
data <- read.csv(file = "data.csv")
#load packages
library(changepoint)
#visualize
library(ggplot2)
ggplot(data, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
# Getting the data in a format that will work to create a time series object
# Convert the "Year" column to a factor to ensure correct ordering
data$Year <- factor(data$Year, levels = rev(unique(data$Year)))
# Getting the data in a format that will work to create a time series object
# Convert the "Year" column to a factor to ensure correct ordering
data$Year <- factor(data$Year, levels = rev(unique(data$Year)))
View(data)
data[data$System == "Wood",]
# Make new data frames for each system
Wood.all <- data[data$System == "Wood",]
View(Wood.all)
Kvi.all <- data[data$System == "Kvichak",]
Eg.all <- data[data$System == "Egegik",]
ggplot(Wood.all, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
# Change the years that were missing so that the data frame years are consisent
data[c(61,62), 2] = "1992"
data[c(79,80), 2] = "1983"
data[c(113,114), 2] = "1968"
# Make new data frames for each system
Wood.all <- data[data$System == "Wood",]
Kvi.all <- data[data$System == "Kvichak",]
Eg.all <- data[data$System == "Egegik",]
ggplot(Wood.all, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
ggplot(Kvi.all, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
ggplot(Eg.all, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
ggplot(Wood.all, aes(x = Year,
y = PHE.mean)) +
geom_point(size = 3, alpha = 0.7)
Wood.all[Wood.all$Age == "2",]
plot(x = Wood.all$Year,
y = Wood.all[Wood.all$Age == "2",])
Wood.all[Wood.all$Age == "2", PHE.mean]
Wood.all[Wood.all$Age == "2", "PHE.mean"]
plot(x = Wood.all$Year,
y = Wood.all[Wood.all$Age == "2", "PHE.mean"])
plot(x = Wood.all[Wood.all$Age == "2", "Year"],
y = Wood.all[Wood.all$Age == "2", "PHE.mean"])
plot(x = Wood.all[Wood.all$Age == "2", "Year"],
y = Wood.all[Wood.all$Age == "2", "PHE.mean"],
type = "l")
Wood.all[Wood.all$Age == "2", "Year"]
plot(x = as.numeric(Wood.all[Wood.all$Age == "2", "Year"]),
y = Wood.all[Wood.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Kvi.all[Kvi.all$Age == "2", "Year"]),
y = Kvi.all[Kvi.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Kvi.all[Kvi.all$Age == "3", "Year"]),
y = Kvi.all[Kvi.all$Age == "3", "PHE.mean"],
type = "l")
plot(x = as.numeric(Kvi.all[Kvi.all$Age == "2", "Year"]),
y = Kvi.all[Kvi.all$Age == "2", "PHE.mean"],
type = "l")
# Plotting
plot(x = as.numeric(Wood.all[Wood.all$Age == "3", "Year"]),
y = Wood.all[Wood.all$Age == "3", "PHE.mean"],
type = "l")
# Plotting
plot(x = as.numeric(Wood.all[Wood.all$Age == "2", "Year"]),
y = Wood.all[Wood.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Eg.all[Eg.all$Age == "2", "Year"]),
y = Eg.all[Eg.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = (Eg.all[Eg.all$Age == "2", "Year"]),
y = Eg.all[Eg.all$Age == "2", "PHE.mean"],
type = "l")
plot(x = as.numeric(Eg.all[Eg.all$Age == "2", "Year"]),
y = Eg.all[Eg.all$Age == "2", "PHE.mean"],
type = "l")
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
avg_data_all <- data %>%
group_by(Year) %>%
summarise(avg_PHE = mean(PHE.mean, na.rm = TRUE))
# Average PHE across all ages and systems (should have one data point per year)
library(dplyr)
avg_data_all <- data %>%
group_by(Year) %>%
summarise(avg_PHE = mean(PHE.mean, na.rm = TRUE))
print(avg_data_all)
plot(avg_data_all, pch = 1)
# Convert data to a time series object
ts_data <- ts(avg_data_all$avg_PHE,
start = avg_data_all$Year[1],
end = avg_data_all$Year[length(avg_data_all$Year)],
frequency = 1)
plot(avg_data_all)
# Convert data to a time series object
ts_data <- ts(avg_data_all$avg_PHE,
start = avg_data_all$Year[1],
end = avg_data_all$Year[length(avg_data_all$Year)],
frequency = 1)
plot(ts_data)
# Scale the data so the variance is 1 and mean is 0 and do CP analysis
ts_1_scale <- cpt.mean(as.vector(scale(ts_data)), method = "PELT")
# Plot the change point analysis results
plot(ts_1_scale, cpt.col = "blue")
summary(ts_1_scale)
# Average PHE across all systems with only age 2
age.2 <- data[data$Age == "2",]
library(dplyr)
avg_data_2 <- age.2 %>%
group_by(Year) %>%
summarise(PHE.mean = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_data_2 <- ts(avg_data_2$PHE.mean,
start = avg_data_2$Year[1],
end = avg_data_2$Year[length(avg_data_2$Year)],
frequency = 1)
plot(ts_data_2)
# Scale the data so the variance is 1 and mean is 0 and then do CP analysis
ts_2_scale <- cpt.mean(as.vector(scale(ts_data_2)))
# Plot the change point analysis results
plot(ts_2_scale, cpt.col = "blue")
summary(ts_2_scale)
# Average PHE for Wood with both age classes
library(dplyr)
Wood.all <- Wood %>%
group_by(Year) %>%
summarise(PHE = mean(Wood, na.rm = TRUE))
Wood <- Wood.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
View(Wood)
# Convert data to a time series object
ts_Wood <- ts(Wood$PHE,
start = Wood$Year[1],
end = Wood$Year[length(Wood$Year)],
frequency = 1)
plot(ts_Wood)
# Perform change point analysis using the 'cpt.mean' function
cpt.Wood <- cpt.mean(as.vector(scale(ts_Wood)))
# Plot the change point analysis results
plot(cpt_Wood, cpt.col = "blue")
# Plot the change point analysis results
plot(cpt.Wood, cpt.col = "blue")
Kvichak <- Kvi.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_Kvichak <- ts(Kvichak$PHE,
start = Kvichak$Year[1],
end = Kvichak$Year[length(Kvichak$Year)],
frequency = 1)
plot(ts_Kvichak)
# Convert data to a time series object
ts_Kvichak <- ts(Kvichak$PHE,
start = Kvichak$Year[1],
end = Kvichak$Year[length(Kvichak$Year)],
frequency = 1)
plot(ts_Kvichak)
View(Kvi.all)
View(Kvichak)
View(Kvi.all)
# Perform change point analysis using the 'cpt.mean' function
cpt.Kvicak <- cpt.mean(as.vector(scale(ts_Kvichak)))
# Average PHE for Egegik with both age classes
Egegik <- Eg.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
View(Egegik)
# Average PHE for Egegik with both age classes
Egegik <- Eg.all %>%
group_by(Year) %>%
summarise(PHE = mean(PHE.mean, na.rm = TRUE))
# Convert data to a time series object
ts_Egegik <- ts(Egegik$PHE,
start = Egegik$Year[1],
end = Egegik$Year[length(Egegik$Year)],
frequency = 1)
plot(ts_Egegik)
setwd("~/Documents/GitHub/CSIA_lab_work/data")
data <- read.csv(file = "final/data.csv")
PDO <- read.csv(file = "Environmental/PDO.csv")
NPGO <- read.csv(file = "Environmental/NPGO.csv")
View(PDO)
View(NPGO)
#Load Packages
library(dplyr)
library(ggplot2)
#Get per year average of both data frames
library(dplyr)
PDO$Year
?data.frame
?matrix
length(PDO$Year)
#PDO
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
PDO_annual[3,1] <- 4
View(PDO_annual)
#PDO
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
PDO$Year[2]
#PDO
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
for(i in 1:length(PDO$Year)){
PDO_annual[i,1] <- PDO$Year[i]
}
View(PDO_annual)
PDO[1, 2:13]
a <- PDO[1, 2:13]
View(a)
mean(a)
a <- as.numeric(PDO[1, 2:13])
mean(a)
rm(a)
#PDO
PDO_annual <- matrix(nrow = length(PDO$Year), ncol = 2)
for(i in 1:length(PDO$Year)){
PDO_annual[i,1] <- PDO$Year[i]
PDO_annual[i,2] <- mean(as.numeric(PDO(i, 2:13)))
}
for(i in 1:length(PDO$Year)){
PDO_annual[i,1] <- PDO$Year[i]
PDO_annual[i,2] <- mean(as.numeric(PDO[i, 2:13]))
}
plot(PDO_annual)
mean(as.numeric(PDO[1, 2:13]))
as.numeric(PDO[1, 2:13])
PDO[1, 2:13]
PDO_annual[1,1]
PDO_annual[length(PDO_annual$Year),1]
PDO_annual$V1
length(PDO_annual$V1
length(PDO_annual$V1)
ts.PDO <- ts(PDO_annual,
start = PDO_annual[1,1],
end = PDO_annual[169,1],
frequency = 1)
View(ts.PDO)
cpt <- cpt.mean(as.vector(scale(ts.PDO)), method = "PELT")
plot(cpt, cpt.col = "blue")
plot(ts.PDO)
PDO_annual[,2]
ts.PDO <- ts(PDO_annual[,2],
start = PDO_annual[1,1],
end = PDO_annual[169,1],
frequency = 1)
plot(x = ts.PDO)
cpt <- cpt.mean(ts.PDO, method = "PELT")
plot(cpt, cpt.col = "blue")
summary(cpt)
cpt <- cpt.mean(as.vector(scale(ts.PDO)), method = "PELT")
plot(cpt, cpt.col = "blue")
summary(cpt)
plot(PDO_annual)
plot(PDO_annual,
type = "l")
ts.PDO <- ts(PDO_annual[,2],
start = PDO_annual[1,1],
end = PDO_annual[169,1],
frequency = 1)
?cpt.mean
cpt.1 <- cpt.mean(ts.PDO)
plot(cpt.1, cpt.col = "blue")
summary(cpt.1)
cpt.1 <- cpt.mean(ts.PDO, method = "PELT")
plot(cpt.1, cpt.col = "blue")
summary(cpt.1)
#NPGO average per year
NPGO_annual <- NPGO %>%
group_by(Year) %>%
summarise(avg = NPGO, na.rm = TRUE)
View(NPGO_annual)
#NPGO average per year
NPGO_annual <- NPGO %>%
group_by(Year) %>%
summarise(avg = NPGO)
#NPGO average per year
NPGO_annual <- NPGO %>%
group_by(Year) %>%
summarise(avg = mean(NPGO))
View(NPGO_annual)
plot(NPGO_annual, type = "l")
NPGO_annual[72,1]
ts.NPGO <- ts(NPGO_annual[,1],
start = NPGO_annual[1,1],
end = NPGO_annual[72,1],
frequency = 1)
cpt.N <- cpt.mean(as.vector(scale(ts.NPGO)), method = "PELT")
plot(cpt.N, cpt.col ="blue")
ts.NPGO
ts.NPGO <- ts(NPGO_annual[,2],
start = NPGO_annual[1,1],
end = NPGO_annual[72,1],
frequency = 1)
cpt.N <- cpt.mean(as.vector(scale(ts.NPGO)), method = "PELT")
plot(cpt.N, cpt.col ="blue")
